fileTypes: ['yml']
name: "Ansible"
patterns: [
  {
    captures:
      "1":
        name: "comment.line.number-sign.ansible"
      "2":
        name: "punctuation.definition.comment.line.ansible"
    match: "(?:^ *|\\G *)((#).*)"
    name: "comment.line.number-sign.ansible"
  }
  {
    match: "(\\{\\{ *[^\\{\\}]+ *\\}\\})|(\\$\\{[^\\{\\}]+\\})"
    name: "storage.type.ansible"
  }
  {
    captures:
      "2":
        name: "keyword.other.ansible"
      "3":
        name: "string.quoted.double.ansible"
    match: "(\\-) (name\\:|include\\:) (.*)"
    name: "text"
  }
  {
    captures:
      "2":
        name: "keyword.other.ansible"
    match: "(^)?(- |\\s*(\\w+\\ *:))"
    name: "text"
  }
  {
    begin: "- {"
    beginCaptures:
        "0":
            name: "text"
    end: "}"
    endCaptures:
        "0":
            name: "text"
    name: "text"
    patterns: [
        {
          match: "(role\\:)|(tags\\:)|(when\\:)|(\\w+:)"
          name: "keyword.other.ansible"
        }
    ]
  }
  {
    begin: "(\\w+)(=)\\\"?"
    beginCaptures:
      "1":
        name: "entity.other.attribute-name.ansible"
      "2":
        name: "string.quoted.double.ansible"
    contentName: "constant.other.ansible"
    end: "(\\\"?[,\"=\\n ])"
    patterns: [
      {
        include: "$self"
      }
      {
        match: "."
        name: "text"
      }
    ]
  }
  {
    captures:
      "2":
        name: "variable.parameter.ansible"
    match: "^(\\[[0-9a-zA-Z_,=-]+(((\\:)children)*)\\])"
    name: "string.quoted.double.ansible"
  }
]
scopeName: "source.ansible"
